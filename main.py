from aiogram.contrib.middlewares.logging import LoggingMiddleware


from aiogram.contrib.fsm_storage.memory import MemoryStorage


from aiogram.utils.exceptions import MessageNotModified


from aiogram.utils.callback_data import CallbackData


from aiogram.dispatcher.filters import Text


from aiogram.dispatcher import Dispatcher, FSMContext


from aiogram import Bot, types, executor

import bs4
import requests

from states import MainStates

from typing import Union, Any
import logging
import random

from database import Database
from config import OPERATOR_PHONE_NUMBERS, TOKEN, OPERATOR_TELEGRAM_ID
import dialogs
import conversion


logging.basicConfig()

database = Database()

district_record: Union[tuple[dict[str, Any], ...], None]

districts = {"–ü–æ–ª—Ç–∞–≤–∞": "poltava", "–ü–æ–ª—Ç. —Ä–∞–π–æ–Ω": "poltava_district"}


bot = Bot(token=TOKEN)


dp = Dispatcher(bot, storage=MemoryStorage())


dp.middleware.setup(LoggingMiddleware())

district_selection_dialog_cb_data = CallbackData("district", "action")


estate_selection_dialog_cb_data = CallbackData("estate", "action")


inline_sell_dialog_cb_data = CallbackData("sell_choice", "action")


inline_properties_dialog_cb_data = CallbackData(
    "property", "property", "filter", "row_index", "column_index"
)

inline_terms_dialog_cb_data = CallbackData("menu_item", "action")

inline_favorites_dialog_cb_data = CallbackData("menu_item", "action", "index")

inline_search_menu_dialog_cb_data = CallbackData("menu_item", "action")

# @dp.message_handler()
# async def get_message(message: types.Message):


@dp.message_handler(commands=["start"], state="*")
async def start_command(message: types.Message, state: FSMContext):
    state_data = await state.get_data()

    if "property_group_0" not in state_data.keys():
        await state.update_data(
            property_group_0={
                "name": "–í–∞—Ä–∏–∞–Ω—Ç 1 (–ü—É—Å—Ç–æ)",
                "district": str(),
                "estate_type": str(),
                "commerce_type": str(),
                "room_count": [],
                "area": [],
                "price": [],
            },
            property_group_1={
                "name": "–í–∞—Ä–∏–∞–Ω—Ç 2 (–ü—É—Å—Ç–æ)",
                "district": str(),
                "estate_type": str(),
                "commerce_type": str(),
                "room_count": [],
                "area": [],
                "price": [],
            },
            property_group_2={
                "name": "–í–∞—Ä–∏–∞–Ω—Ç 3 (–ü—É—Å—Ç–æ)",
                "district": str(),
                "estate_type": str(),
                "commerce_type": str(),
                "room_count": [],
                "area": [],
                "price": [],
            },
        )

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –î–æ–º24.",
        reply_markup=dialogs.StartDialog(),
    )


# region StartDialog handlers


@dp.message_handler(lambda message: message.text == "–ö—É–ø–∏—Ç—å", state="*")
async def buy_button(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.from_user.id,
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞, –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —É—á–∞—Å—Ç–∫–∏.",
        reply_markup=dialogs.MainMenuDialog(),
    )

    state_data = await state.get_data()

    await MainStates.buying.set()

    await state.update_data(state_data)


@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–¥–∞—Ç—å", state="*")
async def sell_button(message: types.Message, state: FSMContext):
    current_property_group = {
        "district": str(),
        "estate_type": str(),
        "commerce_type": str(),
        "room_count": [],
        "area": [],
        "price": [],
        "sale_type": "",
    }

    await state.update_data(current_property_group=current_property_group)

    await bot.send_message(
        message.from_user.id,
        "–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞:",
        reply_markup=dialogs.DistrictSelectionDialog(
            districts, district_selection_dialog_cb_data
        ),
    )

    state_data = await state.get_data()

    await MainStates.selling.set()

    await state.update_data(state_data)


# endregion


# region MainMenuDialog handlers


@dp.message_handler(
    lambda message: message.text == "–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç", state=MainStates.buying
)
async def search_button(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.from_user.id,
        "–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ üîé",
        reply_markup=dialogs.PreSearchMenuDialog(),
    )

    current_property_group = {
        "district": str(),
        "estate_type": str(),
        "commerce_type": str(),
        "room_count": [],
        "area": [],
        "price": [],
    }

    await state.update_data(current_property_group=current_property_group)


@dp.message_handler(
    lambda message: message.text == "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ", state=MainStates.buying
)
async def settings_button(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
        reply_markup=dialogs.PhoneRetreivalDialog(),
    )


@dp.message_handler(
    lambda message: message.text == "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
    state=MainStates.buying,
)
async def contact_operator_button(message: types.Message):
    index = random.randint(0, len(OPERATOR_PHONE_NUMBERS) - 1)

    contact = OPERATOR_PHONE_NUMBERS[index]

    await bot.send_contact(
        message.from_user.id, contact["phone"], "–û–ø–µ—Ä–∞—Ç–æ—Ä", contact["name"]
    )


@dp.message_handler(
    lambda message: message.text == "–£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
    state=MainStates.buying,
)
async def terms_buying_button(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        (
            "–ó–¥–µ—Å—å –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ–≥–æ–≤–æ—Ä–∞"
            " –∏ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞–º–∏"
        ),
        reply_markup=dialogs.BuyingTermsDialog(inline_terms_dialog_cb_data),
    )


@dp.message_handler(
    lambda message: message.text == "–£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
    state=MainStates.selling,
)
async def terms_selling_button(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        (
            "–ó–¥–µ—Å—å –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ–≥–æ–≤–æ—Ä–∞"
            " –∏ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞–º–∏"
        ),
        reply_markup=dialogs.SellingTermsDialog(inline_terms_dialog_cb_data),
    )


@dp.message_handler(
    lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
    state=MainStates.buying,
)
async def back_to_start_button(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.StartDialog(),
    )


# endregion


# region InlineTermsDialog handlers


@dp.callback_query_handler(
    inline_terms_dialog_cb_data.filter(action="about"), state="*"
)
async def about_button(query: types.CallbackQuery):
    await query.answer()

    await bot.send_message(
        query.from_user.id,
        (
            "–û –∫–æ–º–ø–∞–Ω–∏–∏:\n"
            "Dom24.com.ua ‚Äì –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ü–æ–ª—Ç–∞–≤–µ ‚Äì "
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–µ–∫—Ç –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. "
            "–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª, —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç "
            "–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: "
            "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—Ä–º—ã, –ø—Ä–æ–¥–∞–≤—Ü—ã –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏, –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã.\n"
            "–ó–∞–¥–∞—á–∞ –ø—Ä–æ–µ–∫—Ç–∞: —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ "
            "–ü–æ–ª—Ç–∞–≤–µ –∏ –ü–æ–ª—Ç–∞–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ.\n"
            "–ù–∞—à —Å–∞–π—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ "
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∏ –∞—Ä–µ–Ω–¥–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, "
            "–ø—Ä–æ–¥–∞–≤—Ü–∞–º ‚Äì –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ–Ω–µ—Å–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ–º "
            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.\n"
            "–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, —Å–¥–∞—Ç—å "
            "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, "
            "–ø—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ü–æ–ª—Ç–∞–≤–µ –∏ –ü–æ–ª—Ç–∞–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ."
        ),
    )


@dp.callback_query_handler(
    inline_terms_dialog_cb_data.filter(action="payment_system"),
    state="*",
)
async def payment_system_button(query: types.CallbackQuery):
    await query.answer()

    doc_file = types.InputFile(
        "./docs/payment_system.pdf", filename="–ü–∞–∫–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã.pdf"
    )

    await bot.send_document(query.from_user.id, doc_file)


@dp.callback_query_handler(
    inline_terms_dialog_cb_data.filter(action="buyer_agreement"),
    state="*",
)
async def buyer_agreement_button(query: types.CallbackQuery):
    await query.answer()

    doc_file = types.InputFile(
        "./docs/buyer_agreement.pdf",
        filename="–î–æ–≥–æ–≤–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ (–∫—É–ø–ª—è).pdf",
    )

    await bot.send_document(query.from_user.id, doc_file)


@dp.callback_query_handler(
    inline_terms_dialog_cb_data.filter(action="seller_agreement"),
    state="*",
)
async def seller_agreement_button(query: types.CallbackQuery):
    await query.answer()

    doc_file = types.InputFile(
        "./docs/seller_agreement.pdf",
        filename="–î–æ–≥–æ–≤–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ (–ø—Ä–æ–¥–∞–∂–∞).pdf",
    )

    await bot.send_document(query.from_user.id, doc_file)


@dp.callback_query_handler(
    inline_terms_dialog_cb_data.filter(action="back"), state=MainStates.buying
)
async def terms_back_button(query: types.CallbackQuery):
    await query.answer()

    await bot.send_message(
        query.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.MainMenuDialog(),
    )


# endregion


# region PreSearchMenuDialog handlers


@dp.message_handler(
    lambda message: message.text == "–ó–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", state=MainStates.buying
)
async def set_parameters_button(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.from_user.id,
        "–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞:",
        reply_markup=dialogs.DistrictSelectionDialog(
            districts,
            district_selection_dialog_cb_data,
        ),
    )


@dp.message_handler(
    lambda message: message.text == "–ü–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º",
    state=MainStates.buying,
)
async def favorites_menu_button(message: types.Message, state: FSMContext):
    state_data = await state.get_data()

    names = []

    for i in range(0, 3):
        names.append(state_data[f"property_group_{str(i)}"]["name"])

    await bot.send_message(
        message.from_user.id,
        "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ:",
        reply_markup=dialogs.InlineFavoritesDialog(
            inline_favorites_dialog_cb_data, names
        ),
    )


@dp.message_handler(
    lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    state=[MainStates.buying, MainStates.editing],
)
async def main_menu_button(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá",
        reply_markup=dialogs.MainMenuDialog(),
    )


# endregion


# region InlineFavoritesDialog handlers


@dp.callback_query_handler(
    inline_favorites_dialog_cb_data.filter(action="property_group"),
    state=MainStates.buying,
)
async def property_group_button(
    query: types.CallbackQuery, callback_data: CallbackData, state: FSMContext
):
    await query.answer()

    state_data = await state.get_data()

    index = callback_data["index"]

    property_group = state_data[f"property_group_{index}"]

    if property_group != {"name": property_group["name"]}:
        await state.update_data(current_property_group=property_group)
        await bot.send_message(
            query.from_user.id,
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
            reply_markup=dialogs.InlineSearchMenuDialog(
                inline_search_menu_dialog_cb_data
            ),
        )
        return

    await bot.send_message(
        query.from_user.id,
        (
            "–î–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            '—Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"'
        ),
    )


@dp.callback_query_handler(
    inline_favorites_dialog_cb_data.filter(action="property_group"),
    state=MainStates.property_group_saving,
)
async def saving_property_group_button(
    query: types.CallbackQuery, callback_data: CallbackData, state: FSMContext
):
    await query.answer()

    await state.update_data(index=callback_data["index"])

    await bot.send_message(
        query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:"
    )

    state_data = await state.get_data()

    await MainStates.property_group_naming.set()

    await state.update_data(state_data)


@dp.callback_query_handler(
    inline_favorites_dialog_cb_data.filter(action="property_group"),
    state=MainStates.editing,
)
async def edit_property_group_button(
    query: types.CallbackQuery, callback_data: CallbackData, state: FSMContext
):
    await query.answer()

    state_data = await state.get_data()

    index = callback_data["index"]

    await state.update_data(
        current_property_group=state_data[f"property_group_{index}"],
        index=index,
    )

    await bot.send_message(
        query.from_user.id,
        "–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞:",
        reply_markup=dialogs.DistrictSelectionDialog(
            districts, district_selection_dialog_cb_data
        ),
    )


@dp.callback_query_handler(
    inline_favorites_dialog_cb_data.filter(action="edit"),
    state=MainStates.buying,
)
async def edit_button(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    keyboard = query.message.reply_markup.inline_keyboard

    for i in range(0, 3):
        button_text = keyboard[i][0].text
        keyboard[i][0].text = f"üõ† {button_text}"

    await query.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await bot.send_message(
        query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    )

    state_data = await state.get_data()

    await MainStates.editing.set()

    await state.update_data(state_data)


# endregion


# region InlineSearchMenuDialog handlers


@dp.message_handler(
    lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è", state=MainStates.buying
)
async def back_button(message: types.Message):
    await database.dispose_post_cursor(message.from_user.id)
    await bot.send_message(
        message.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.PreSearchMenuDialog(),
    )


@dp.callback_query_handler(
    inline_search_menu_dialog_cb_data.filter(action="pick"),
    state=MainStates.buying,
)
async def get_results_button(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    data = await state.get_data()

    current_property_group = data["current_property_group"]

    city_id = conversion.city_id[current_property_group["district"]]

    estate_type = current_property_group["estate_type"]

    if estate_type == "flat":
        type_object_id = "BETWEEN 1 AND 4"
    else:
        type_object_id = conversion.type_object_id[estate_type]

    type_pomesh_id = None

    if current_property_group["commerce_type"] != "":
        commerce_type = current_property_group["commerce_type"]
        type_pomesh_id = conversion.type_pomesh_id[commerce_type]

    await bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    await database.select_posts(
        city_id,
        type_object_id,
        current_property_group["room_count"],
        current_property_group["area"],
        current_property_group["price"],
        type_pomesh_id,
        query.from_user.id,
    )

    await send_posts(query.from_user.id, first_time=True)

    await bot.send_message(
        query.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.PostSearchMenuDialog(),
    )


@dp.callback_query_handler(
    inline_search_menu_dialog_cb_data.filter(action="save_settings"),
    state=MainStates.buying,
)
async def save_to_property_group_button(
    message: types.Message, state: FSMContext
):
    state_data = await state.get_data()

    names = []

    for i in range(0, 3):
        names.append(state_data[f"property_group_{i}"]["name"])

    state_data = await state.get_data()

    await MainStates.property_group_saving.set()

    await state.update_data(state_data)

    await bot.send_message(
        message.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
        reply_markup=dialogs.InlineFavoritesDialog(
            inline_favorites_dialog_cb_data, names, save_mode=True
        ),
    )


# endregion


async def send_posts(user_id: int, first_time: bool = False):
    posts = await database.fetch_posts(user_id)

    if district_record is None:
        logging.error("Error. No district record found in database.")
        return

    districts = dict()

    for district in district_record:
        districts[district["id"]] = district["name"]

    posts_sent = 0

    for post in posts:
        type_object_id = post["type_object_id"]
        post_id = post["id"]
        room_count = post["room_count"]
        ploshad = post["ploshad"]
        ploshad_gil = post["ploshad_gil"]
        rajon = districts[post["rajon_id"]]
        street = post["street"]
        if post["price"] != 0:
            price = post["price"]
        else:
            price = ""

        formatted_text = (
            f"‚úÖ –ü–ª–æ—â–∞–¥—å: {ploshad}\n\n"
            f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∏—Ä/—É–ª–∏—Ü–∞: {rajon}, {street}\n\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} $"
        )

        if (ploshad_gil != "") and (type_object_id != 6):
            formatted_text = (
                f"‚úÖ –ü–ª–æ—â–∞–¥—å: {ploshad}\n\n"
                f"‚úÖ –ñ–∏–ª. –ü–ª–æ—â–∞–¥—å: {ploshad_gil}\n\n"
                f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∏—Ä/—É–ª–∏—Ü–∞: {rajon}, {street}\n\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} $"
            )

        if (
            (room_count is not None)
            and (type_object_id != 9)
            and (type_object_id != 6)
        ):
            formatted_text = (
                f"‚úÖ –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç: {room_count}\n\n" + formatted_text
            )

        post_url = f"https://dom24.com.ua/kartochka-obekta?item={post_id}"

        response = requests.get(post_url)

        try:
            post_html = response.content.decode("utf-8")
            post_soup = bs4.BeautifulSoup(post_html, features="html.parser")

            image_tag = post_soup.find(name="img", class_="image visible")

            image_src = image_tag["src"]  # type: ignore

            image_url = f"https://dom24.com.ua{image_src}"
        except UnicodeDecodeError:
            image_url = (
                "https://dom24.com.ua/images"
                "/placeholders/real-property-placeholder.jpg"
            )
        except TypeError:
            continue

        await bot.send_photo(
            user_id,
            photo=image_url,
            caption=formatted_text,
            reply_markup=dialogs.ShowOnWebDialog(post_url),
        )
        posts_sent += 1

    if (posts_sent == 0) and not first_time:
        await bot.send_message(
            user_id, "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º."
        )
    elif (posts_sent == 0) and first_time:
        await bot.send_message(
            user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )


# region PostSearhMenuDialog handlers
@dp.message_handler(
    lambda message: message.text == "–ï—â—ë –æ–±—ä–µ–∫—Ç—ã", state=MainStates.buying
)
async def more_objects_button(message: types.Message):
    await send_posts(message.from_user.id)
    await bot.send_message(
        message.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.PostSearchMenuDialog(),
    )


@dp.message_handler(
    lambda message: message.text == "–ü–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
    state=MainStates.buying,
)
async def get_updates_button(message: types.Message):
    pass


# endregion


# region DistrictSelectionDialog handler


@dp.callback_query_handler(
    district_selection_dialog_cb_data.filter(
        action=[districts[item] for item in districts]
    ),
    state="*",
)
async def district_selection_button(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):
    await query.answer()

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    current_property_group["district"] = callback_data["action"]

    await state.update_data(current_property_group=current_property_group)

    await bot.send_message(
        query.from_user.id,
        "–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:",
        reply_markup=dialogs.EstateTypeSelectionDialog(
            callback_data["action"], estate_selection_dialog_cb_data
        ),
    )


# endregion


# region EstateTypeSelectionDialog handlers


@dp.callback_query_handler(
    estate_selection_dialog_cb_data.filter(
        action=["flat", "room", "house", "country_house", "claim", "commerce"]
    ),
    state=[MainStates.buying, MainStates.editing],
)
async def estate_buy_button(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):

    await query.answer()

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    current_property_group["estate_type"] = callback_data["action"]

    await state.update_data(current_property_group=current_property_group)

    await send_properties_dialog(query.from_user.id, current_property_group["estate_type"])


@dp.callback_query_handler(
    estate_selection_dialog_cb_data.filter(
        action=["flat", "room", "house", "country_house", "claim", "commerce"]
    ),
    state=MainStates.selling,
)
async def estate_sell_button(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):

    await query.answer()

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    current_property_group["estate_type"] = callback_data["action"]

    await state.update_data(current_property_group=current_property_group)

    await send_sell_menu_message(query.from_user.id)


async def send_sell_menu_message(user_id: int):
    await bot.send_message(
        user_id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.SellMenuDialog(),
    )


async def send_properties_dialog(
    user_id: int, estate_type: str, selling: bool = False
):
    await bot.send_message(
        user_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.",
        reply_markup=dialogs.InlinePropertiesDialog(
            inline_properties_dialog_cb_data, estate_type, selling=selling
        ),
    )


# endregion


# region InlinePropertiesDialog handlers


@dp.callback_query_handler(
    inline_properties_dialog_cb_data.filter(
        property=["room_count", "area", "price"]
    ),
    state=[MainStates.buying, MainStates.editing],
)
async def data_change_handler(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):
    state_data = await state.get_data()
    current_property_group = state_data["current_property_group"]

    keyboard = query.message.reply_markup.inline_keyboard

    row_index = int(callback_data["row_index"])
    column_index = int(callback_data["column_index"])

    if "‚úÖ" not in keyboard[row_index][column_index].text:
        keyboard[row_index][column_index].text = (
            "‚úÖ " + keyboard[row_index][column_index].text
        )

        current_property_group[callback_data["property"]].append(
            callback_data["filter"]
        )
    else:
        keyboard[row_index][column_index].text = keyboard[row_index][
            column_index
        ].text[1:]

        current_property_group[callback_data["property"]].remove(
            callback_data["filter"]
        )

    await state.update_data(current_property_group=current_property_group)

    await query.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await query.answer()


@dp.callback_query_handler(
    inline_properties_dialog_cb_data.filter(
        property=["room_count", "area", "price"]
    ),
    state=MainStates.selling,
)
async def selling_data_change_handler(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):
    state_data = await state.get_data()
    current_property_group = state_data["current_property_group"]

    keyboard = query.message.reply_markup.inline_keyboard

    row_index = int(callback_data["row_index"])
    column_index = int(callback_data["column_index"])

    if "‚úÖ" not in keyboard[row_index][column_index].text:
        current_property_group[callback_data["property"]].append(
            keyboard[row_index][column_index].text
        )

        keyboard[row_index][column_index].text = (
            "‚úÖ " + keyboard[row_index][column_index].text
        )
    else:
        keyboard[row_index][column_index].text = keyboard[row_index][
            column_index
        ].text[1:]

        current_property_group[callback_data["property"]].remove(
            keyboard[row_index][column_index].text
        )

    await state.update_data(current_property_group=current_property_group)

    await query.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await query.answer()


@dp.callback_query_handler(
    inline_properties_dialog_cb_data.filter(property="commerce"),
    state=MainStates.buying,
)
async def commerce_buttons_handler(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):
    await query.answer()

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    current_property_group["commerce_type"] = callback_data["filter"]

    await state.update_data(current_property_group=current_property_group)

    await bot.send_message(
        query.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.InlineSearchMenuDialog(
            inline_search_menu_dialog_cb_data
        ),
    )


@dp.callback_query_handler(
    inline_properties_dialog_cb_data.filter(property="commerce"),
    state=MainStates.selling,
)
async def selling_commerce_buttons_handler(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):
    await query.answer()

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    current_property_group["commerce_type"] = callback_data["filter"]

    await state.update_data(current_property_group=current_property_group)

    sale_type = "–ö–æ–º–º–µ—Ä—Ü–∏—è"

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    first_name = query.from_user.first_name

    last_name = query.from_user.last_name

    formatted_text = await generate_sale_formatted_text(
        first_name, last_name, current_property_group, sale_type
    )

    await state.update_data(formatted_text=formatted_text)

    await bot.send_message(
        query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.",
        reply_markup=dialogs.PhoneRetreivalDialog(),
    )


@dp.callback_query_handler(Text("accept"), state=MainStates.buying)
async def accept_button(query: types.CallbackQuery):
    await query.answer()

    await bot.send_message(
        query.from_user.id,
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá",
        reply_markup=dialogs.InlineSearchMenuDialog(
            inline_search_menu_dialog_cb_data
        ),
    )


@dp.callback_query_handler(Text("sell_fast"), state=MainStates.selling)
async def sell_fast_button(
    query: types.CallbackQuery,
    state: FSMContext,
):
    await query.answer()

    sale_type = "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞"

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    first_name = query.from_user.first_name

    last_name = query.from_user.last_name

    formatted_text = await generate_sale_formatted_text(
        first_name, last_name, current_property_group, sale_type
    )

    await state.update_data(formatted_text=formatted_text)

    await bot.send_message(
        query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.",
        reply_markup=dialogs.PhoneRetreivalDialog(),
    )


@dp.callback_query_handler(Text("sell_expensive"), state=MainStates.selling)
async def sell_expensive_button(
    query: types.CallbackQuery,
    state: FSMContext,
):
    await query.answer()

    sale_type = "–ü—Ä–æ–¥–∞–∂–∞ –¥–æ—Ä–æ–≥–æ"

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    first_name = query.from_user.first_name

    last_name = query.from_user.last_name

    formatted_text = await generate_sale_formatted_text(
        first_name, last_name, current_property_group, sale_type
    )

    await state.update_data(formatted_text=formatted_text)

    await bot.send_message(
        query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.",
        reply_markup=dialogs.PhoneRetreivalDialog(),
    )


async def generate_sale_formatted_text(
    first_name: str,
    last_name: str,
    current_property_group: dict,
    sale_type: str,
):
    district = current_property_group["district"]
    district_localized = conversion.operator_district[district]

    estate_type = current_property_group["estate_type"]
    estate_type_localized = conversion.operator_estate_type[estate_type]

    commerce_type = "N/A"

    if current_property_group["commerce_type"] != "":
        commerce_type = conversion.operator_commerce_type[
            current_property_group["commerce_type"]
        ]

    room_count_formatted = ""

    for item in current_property_group["room_count"]:
        room_count_formatted += f"{item}, "

    area_formatted = ""

    for item in current_property_group["area"]:
        area_formatted += f"{item}, "

    price_formatted = ""

    for item in current_property_group["price"]:
        price_formatted += f"{item}, "

    if estate_type == "room":
        return (
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ"
            f" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name} {last_name}\n\n"
            f"–ì–æ—Ä–æ–¥/–æ–±–ª–∞—Å—Ç—å: {district_localized}\n"
            f"–¢–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è: {estate_type_localized}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {room_count_formatted}\n"
            f"–ü–ª–æ—â–∞–¥—å: {area_formatted}\n"
            f"–¶–µ–Ω–∞: {price_formatted}\n"
            f"–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_type}\n"
        )
    else:
        return (
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ"
            f" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name} {last_name}\n\n"
            f"–ì–æ—Ä–æ–¥/–æ–±–ª–∞—Å—Ç—å: {district_localized}\n"
            f"–¢–∏–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {estate_type_localized}\n"
            f"–¢–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è: {commerce_type}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {room_count_formatted}\n"
            f"–ü–ª–æ—â–∞–¥—å: {area_formatted}\n"
            f"–¶–µ–Ω–∞: {price_formatted}\n"
            f"–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_type}\n"
        )


@dp.callback_query_handler(Text("accept"), state=MainStates.editing)
async def editing_accept_button(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    await bot.send_message(
        query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:"
    )

    state_data = await state.get_data()

    await MainStates.property_group_naming.set()

    await state.update_data(state_data)


@dp.callback_query_handler(
    inline_properties_dialog_cb_data.filter(property="commerce"),
    state=MainStates.editing,
)
async def editing_commerce_buttons_handler(
    query: types.CallbackQuery,
    callback_data: dict[str, str],
    state: FSMContext,
):
    await query.answer()

    state_data = await state.get_data()

    current_property_group = state_data["current_property_group"]

    current_property_group["commerce_type"] = callback_data["filter"]

    await state.update_data(current_property_group=current_property_group)

    await bot.send_message(
        query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:"
    )

    state_data = await state.get_data()

    await MainStates.property_group_naming.set()

    await state.update_data(state_data)


@dp.message_handler(state=MainStates.property_group_naming)
async def property_group_naming_prompt(
    message: types.Message, state: FSMContext
):
    name = message.text

    state_data = await state.get_data()

    index = int(state_data["index"])

    names = []

    for i in range(0, 3):
        names.append(state_data[f"property_group_{str(i)}"]["name"])

    names[index] = name

    await bot.send_message(
        message.from_user.id,
        f"–í–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=dialogs.InlineFavoritesDialog(
            inline_favorites_dialog_cb_data, names
        ),
    )

    state_data = await state.get_data()

    await MainStates.buying.set()

    await state.update_data(state_data)

    state_data = await state.get_data()

    state_data[f"property_group_{index}"] = state_data[
        "current_property_group"
    ]

    state_data[f"property_group_{index}"]["name"] = name

    await state.update_data(**state_data)


# Utility handler. Needed to answer queries for decorative buttons


@dp.callback_query_handler(Text("blank"))
async def black_handler(query: types.CallbackQuery):

    await query.answer()


async def send_search_menu(user_id: int):
    await bot.send_message(
        user_id,
        "–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ üëá",
        reply_markup=dialogs.InlineSearchMenuDialog(
            inline_search_menu_dialog_cb_data
        ),
    )


# endregion


# region SellMenuDialog handlers


@dp.message_handler(
    lambda message: message.text == "–î–∞–ª–µ–µ",
    state=MainStates.selling
)
async def next_sell_menu_button(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    current_property_group = state_data["current_property_group"]
    await send_properties_dialog(
        message.from_user.id, current_property_group["estate_type"], selling=True
    )


# endregion


# region PhoneRetreivalDialog handler


@dp.message_handler(
    state=MainStates.buying,
    content_types=types.ContentType.CONTACT,
)
async def phone_retrieval_buying_button(message: types.Message):
    await bot.send_message(OPERATOR_TELEGRAM_ID, "–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å:")
    await bot.send_contact(
        OPERATOR_TELEGRAM_ID,
        message.contact.phone_number,
        message.from_user.first_name,
    )

    await bot.send_message(
        message.from_user.id,
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.",
        reply_markup=dialogs.StartDialog(),
    )


@dp.message_handler(
    state=MainStates.selling,
    content_types=types.ContentType.CONTACT,
)
async def phone_retrieval_selling_button(
    message: types.Message, state: FSMContext
):
    await bot.send_message(OPERATOR_TELEGRAM_ID, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –æ—Ç:")
    await bot.send_contact(
        OPERATOR_TELEGRAM_ID,
        message.contact.phone_number,
        message.from_user.first_name,
    )

    await bot.send_message(
        message.from_user.id,
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.",
        reply_markup=dialogs.StartDialog(),
    )

    state_data = await state.get_data()

    formatted_text = state_data["formatted_text"]

    await bot.send_message(OPERATOR_TELEGRAM_ID, formatted_text)


@dp.message_handler(
    lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è",
    state=MainStates.selling,
)
async def sell_menu_back_button(message: types.Message):
    await back_to_start_button(message)


# endregion


@dp.errors_handler(exception=MessageNotModified)
async def message_not_modified_handler(update, error):

    return True


if __name__ == "__main__":
    district_record = database.select_districts()
    executor.start_polling(dp, skip_updates=True)
